<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css">
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script src="https://kit.fontawesome.com/139f91225e.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/google-palette@1.1.0/palette.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" integrity="sha256-R4pqcOYV8lt7snxMQO/HSbVCFRPMdrhAFMH+vr9giYI=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css" integrity="sha256-aa0xaJgmK/X74WM224KMQeNQC2xYKwlAt08oZqjeF0E=" crossorigin="anonymous" />
    <!-- <link rel="stylesheet" href="css/site.css"> -->
    <title>Network Monitor</title>
    <%- include ('./css/site.css.ejs', {darkMode: false}) -%>
    <style>
        body, html{
            padding: 0;
            margin: 0;
            height: 100vh;
            color: var(--text-color)
        }
        body{
            display: flex;
            flex-direction: column;
        }
        nav{
            margin: 0;
            padding: 0;
            background-color: var(--ui-item-bg);
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: var(--navbar-height);
            box-shadow: 0 2px 2px -2px var(--black);
            padding-left:1rem;
            padding-right:1rem;
        }
        nav ul{
            margin: 0;
            padding: 0;
            display: flex;
            list-style: none;
        }
        nav ul li{
            padding:.5rem;
        }
        nav ul li a{
            text-decoration: none;
            color: inherit;
            padding: 5px;
        }
        .content{
            padding: 10px;
            display: flex;
            flex-direction: row;
            overflow: auto;
            flex:1;
        }
        .ui-item{
            background-color: var(--ui-item-bg);
            margin: 10px;
            box-shadow: var(--ui-item-shadow);
        }
        .left-nav{
            flex:1;
        }
        .right-nav{
            flex:1;
            justify-content: flex-end;
        }
        .site-title{
            font-weight: bolder;
        }

        ::-webkit-scrollbar {
            width: 10px;
        }
        ::-webkit-scrollbar-track {
            background: transparent;
        }
        ::-webkit-scrollbar-thumb {
            background: #414141;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #727272;
        }
        .devices-list-container{
            flex:1;
        }
        .devices-list{
            overflow: auto;
            height: 95%;
        }
        .devices-list ul{
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .device{
            display: flex;
            justify-content: space-between;
            padding: 1rem;
            cursor: pointer;
        }
        .device:hover{
            background-color: var(--ui-item-bg-hover);
        }
        .device-name{
            flex:1;
            text-align: left;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }
        .device-status{
            flex:1;
            justify-self: flex-end;
            text-align: right;
        }
        .device-selected{
            background-color: var(--ui-item-selected);
        }
        .device-offline{
            color: var(--red);
        }
        .device-online{
            color:var(--green);
        }
        .device-loading{
            color:var(--device-loading)
        }
        .device-new{
            background-color: var(--ui-item-bg-hover);
            animation-name: newDevicePulse;
            animation-duration: .5s;
            animation-iteration-count: 3;
        }
        .device-new .device-name{
            border-bottom: 1px solid var(--black);
        }
        @keyframes newDevicePulse {
            0% {
                background-color: var(--ui-item-bg-hover);
            }
            50% {
                background-color: var(--green);
            }
            100% {
                background-color: var(--ui-item-bg-hover);
            }
        }


        .device-detail{
            flex:5;
            display: flex;
            flex-direction: column;
        }
        .detail-content{
            height: inherit;
            overflow: auto;
            flex: 1;
            display: flex;
        }
        .other-data{
            flex: 1;
        }
        .protocols{
            border-left: 1px solid var(--sub-heading-color);
        }
        .protocol-header{
            width: 100%;
            text-align: center;
            padding: 5px;
            background-color: var(--sub-heading-color);
        }
        .section-header{
            display: flex;
            justify-content: space-evenly;
            text-align: center;
            box-shadow: 0 2px 2px -2px rgba(0,0,0,.4);
            padding: 10px;
        }
        .sub-heading{
            background-color: var(--sub-heading-color);
            color: var(--text-color);
            font-weight: 700;
            justify-content: space-between;
            padding-left: 3rem;
            padding-right: 3rem;
            cursor: pointer;
        }
        .sub-heading:hover{
            background-color: var(--ui-item-bg-hover);
        }
        .section-body{
            border-bottom: 1px solid var(--ui-item-bg-hover);
        }
        .logout{
            text-decoration: none;
            color:inherit;
            border: 1px solid var(--accent);
            padding-left: 1rem;
            padding-right: 1rem;
            padding-top: .5rem;
            padding-bottom: .5rem;
        }
        .logout:hover{
            color: var(--red);
            border: 1px solid var(--red);
        }
        .section-title{
            flex:3;
        }
        .data-rate{
        }
        .row{
            display: flex;
            flex-direction: column;
            flex-wrap: wrap;    
        }
        .row div{
            text-align: right;
        }
        #live-data-table{
            transform: rotateX(0deg);
            display: flex;
            text-align: left;
            flex-direction: column;
            min-width: 25vw;
            table-layout: fixed;
        }
        #live-data-table thead{
            height: 40px;
            line-height: 40px;
            width: 100%;
            background-color: #d0c6e4;
        }
        #live-data-table tbody{
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
        }
        #live-data-table thead tr{
            display: flex;
            height: inherit;
        }
        #live-data-table tbody tr{
            display: flex;
            height: inherit;
        }
        #live-data-table tbody tr td{
            flex: 1;
            padding-left: 10px;
            padding-bottom: 3px;
            padding-top: 3px;
        }
        #live-data-table thead tr th{
            flex: 1;
            padding-left: 10px;
        }


        #common-ip-table{
            transform: rotateX(0deg);
            display: flex;
            text-align: left;
            flex-direction: column;
            min-width: 25vw;
            table-layout: fixed;
        }
        #common-ip-table thead{
            height: 40px;
            line-height: 40px;
            width: 100%;
            background-color: #d0c6e4;
        }
        #common-ip-table tbody{
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
        }
        #common-ip-table thead tr{
            display: flex;
            height: inherit;
        }
        #common-ip-table tbody tr{
            display: flex;
            height: inherit;
        }
        #common-ip-table tbody tr td{
            flex: 1;
            padding-left: 10px;
            padding-bottom: 3px;
            padding-top: 3px;
        }
        #common-ip-table thead tr th{
            flex: 1;
            padding-left: 10px;
        }
        button{
            outline:none;
            padding:.2rem;
            background-repeat:no-repeat;
            border: none;
            cursor: pointer;
            border: 1px solid var(--accent);
            background-color: var(--ui-item-bg);
            color: var(--text-color)
        }
        button:hover{
            background-color: var(--ui-item-bg-hover);   
        }
        body-hidden{
            display: none;
        }
    </style>
</head>
<body>
    <%- include ('./pieces/header.ejs') -%>
    <div class="content">
        <div class="devices-list-container ui-item">
            <div class="section-header"><div class="section-title"><%= username %>'s Devices</div><div class="section-action"><i class="fas fa-plus" id="add-device"></i></div></div>
            <div class="devices-list">
                <ul>
                </ul>
            </div> 
        </div>
        <div class="device-detail ui-item">
            <div class="section-header">Device Detail</div>
            <div class="detail-content">

            </div>
            <script>
                class DataRateChart{
                    constructor(selector){
                        this.chartSize = 10
                        this.selector = selector
                        this.datas = []
                        this.label = 'Mbps'
                        this.options = {
                            responsive: true,
                            scales: {
                                yAxes: [{
                                    display: true,
                                    ticks: {
                                        suggestedMin: 0,
                                    }
                                }]
                            }
                        }
                    }
                    update(){
                        this.innerChart.update({
                            duration: 800,
                            easing: 'easeOutExpo'
                        })
                    }
                    generate(){
                        this.innerChart = new Chart($(this.selector), {
                            type: 'line',
                            data: this.getData(),
                            options: this.options,
                        })
                    }
                    addData(data){
                        if(this.datas.length >= this.chartSize)
                            this.datas.shift()
                        this.datas.push(data)
                        if(this.innerChart)
                            this.update()
                    }
                    getData(){
                        return {
                            labels: (new Array(this.chartSize)).fill(''),
                            datasets: [{
                                label: this.label,
                                data: this.datas,
                                lineTension: 0,
                            }]
                        }
                    }
                }
                class ProtocolChart{
                    constructor(selector){
                        this.rawdata = []
                        this.selector = selector
                        this.total = 0
                        this.labels = []
                        this.counts = {}
                        this.options = {
                            responsive: true,
                            cutoutPercentage: 75,
                        }
                    }
                    update(){
                        this.innerChart.update({
                            duration: 800,
                            easing: 'easeOutExpo'
                        })
                    }
                    generate(){
                        console.log(this.getData())
                        this.innerChart = new Chart($(this.selector), {
                            type: 'doughnut',
                            data: this.getData(),
                            options: this.options,
                        })
                    }
                    addData(label){
                        if(!this.labels.includes(label))
                            this.labels.push(label)
                        if(!this.counts[label])
                                this.counts[label] = 1
                            else
                                this.counts[label] = this.counts[label] + 1
                        if(this.innerChart)
                            this.update()
                        this.total = this.total + 1
                        
                        this.rawdata = []
                        this.labels.forEach((label)=>{
                            this.rawdata.push(this.counts[label])
                        })
                        
                        if(this.innerChart){
                            this.innerChart.data.datasets[0].data = this.rawdata
                            this.innerChart.data.datasets[0].backgroundColor = palette('tol', this.labels.length).map(function(hex) {
                                return '#' + hex;
                            })
                        }
                    }
                    getData(){
                        console.log(this.rawdata)
                        return {
                            labels: this.labels,
                            datasets: [{
                                data: this.rawdata,
                                lineTension: 0,
                                backgroundColor: palette('tol', this.labels.length).map(function(hex) {
                                    return '#' + hex;
                                })
                            }]
                        }
                    }
                }
            </script>
        </div>
    </div>
    <script>
        var deviceCodeRefresh
        var selected_device = null
        refreshDevices();
        $('#add-device').click(function (e) { 
            $(this).removeClass('fa-plus')
            $(this).addClass('fa-spinner')
            $(this).addClass('fa-spin')
            $.post("/ajax/getAddDeviceForm",
                function (li, textStatus, jqXHR) {
                    $('.devices-list ul').append(li);
                    $('#add-device').off(); 
                }
            );
        });
        $('.devices-list').on('click', 'ul li', function (e){
            if($(this).attr('id') === 'new-device')
                return
            e.preventDefault();
            $('.device-selected').removeClass('device-selected');
            $(this).addClass('device-selected')
            //$('.device-detail .section-header').html($(this).find('.device-name').html() + ' Detail')
            var device_id = $(this).find('.device').attr('id').split('-')[1];
            selected_device = device_id
            $.post("/ajax/getDeviceDetail",{
                    device_id: device_id,
                },
                function (data, textStatus, jqXHR) {
                    $('.detail-content').html(data);
                    if(deviceCodeRefresh)
                        clearInterval(deviceCodeRefresh) 
                    $.post("/ajax/getDeviceLinkCode", {
                        device_id: selected_device,
                    },
                        function (data, textStatus, jqXHR) {
                            setLinkCode(data)
                            deviceCodeRefresh = setInterval(function(){
                                $.post("/ajax/getDeviceLinkCode", {
                                    device_id: selected_device,
                                },
                                    function (data, textStatus, jqXHR) {
                                        setLinkCode(data)
                                    }
                                );
                            }, 30000) //30 Seconds
                        }
                    );
                }
            );
        })
        function setLinkCode(link_code){
            $('.link-device').find('input').val(link_code);
        }
        $(document).on('click', '.sub-heading', function(e){
            if($(this).next('.section-body').is(':visible')){
                $(this).find('.fas').removeClass('fa-caret-down')
                $(this).find('.fas').addClass('fa-caret-left')
                $(this).next('.section-body').slideUp(100)
            }else{
                $(this).find('.fas').removeClass('fa-caret-left')
                $(this).find('.fas').addClass('fa-caret-down')
                $(this).next('.section-body').slideDown(100)
            }
        })
        function refreshDevices(){
            $.post("/ajax/getDevices",
                function (deviceList, textStatus, jqXHR) {
                    $('.devices-list ul').html('');
                    deviceList.forEach(data => {
                        $('.devices-list ul').append('<span style="display:none;">d-'+data.device_id+'</span>')
                    })
                    deviceList.forEach(devID => {
                        $.post("/ajax/getDeviceDisplay", devID,
                            function (data, textStatus, jqXHR) {
                                $('.devices-list ul').html($('.devices-list ul').html().replace(new RegExp('<span style="display:none;">d-'+devID.device_id+'</span>', 'g'), data))
                            }
                        );
                    });
                }
            );
        }
    </script>
    <script>
        var ws = new WebSocket('ws://<%= ws_remote %>?api_key=<%= api_key %>&is_webclient=true&token=<%= token %>')
        ws.onmessage = (event) => {
            var message = JSON.parse(event.data)
            if(message['meta']['type'] == 'update'){
                message['data']['devices'].forEach((device_update, i) => {
                    if(!device_update)
                        return
                    //Device Status (Online/Offline)
                    if(device_update.status == "Online")
                        $('#device-'+i).find('.device-status').html('<i class="fas fa-circle"></i>').removeClass('device-loading').removeClass('device-offline').addClass('device-online')
                    else
                        $('#device-'+i).find('.device-status').html('<i class="far fa-circle"></i>').removeClass('device-loading').removeClass('device-online').addClass('device-offline')
                    var device_id = device_update['device_id']
                    if(device_id == selected_device)
                        if(device_update.update_buffer){
                            device_update.update_buffer.forEach((update, i) => {
                                if(update.connection_speed)
                                    if(typeof(drChart) != "undefined")
                                        drChart.addData(update.connection_speed)
                                if(update.updates){
                                    tickerTable.parent().hide(1, function(){
                                        if(tickerTable.children().length >= 50){
                                            $('#live-data-table tbody tr:nth-child(-n+'+(tickerTable.children().length-50)+')').remove();
                                        }
                                       
                                        update.updates.forEach((packet, i) => {
                                            if(tickerTable){
                                                if(packet.table){
                                                    tickerCount = tickerCount + 1
                                                    var children = tickerTable.children();
                                                    
                                                    var row = "<tr>"
                                                    row += '<td>'+tickerCount+'</td>'
                                                    row += '<td>'+packet.Parsed_Protocol+'</td>'
                                                    row += '<td>'+packet.table.SrcIP+'</td>'
                                                    if(packet.table.SrcPort_Desc.length > 0)
                                                        row += '<td style="color: var(--red); cursor:pointer;" title="'+packet.table.SrcPort_Desc+'">'+packet.table.SrcPort+'</td>'
                                                    else
                                                        row += '<td>'+packet.table.SrcPort+'</td>'
                                                    row += '<td>'+packet.table.DestIP+'</td>'
                                                    if(packet.table.DestPort_Desc.length > 0)
                                                        row += '<td style="color: var(--red); cursor:pointer;" title="'+packet.table.DestPort_Desc+'">'+packet.table.DestPort+'</td>'
                                                    else
                                                        row += '<td>'+packet.table.DestPort+'</td>'
                                                    row += '</tr>'
                                                    tickerTable.append(row)
                                                }
                                            }
                                            if(d_dpChart)
                                                d_dpChart.addData(packet.Parsed_Protocol)
                                            if(packet.table){
                                                
                                                if(packet.table.SrcIP)
                                                    if(document.getElementById("ip-"+packet.table.SrcIP) == null){'<td style="color: var(--red); cursor:pointer;" title="'+packet.table.SrcPort_Desc+'">'+packet.table.SrcPort+'</td>'
                                                        $('#common-ip-table tbody').append("<tr id='ip-"+packet.table.SrcIP+"'><td style='color: var(--red); cursor:pointer;' title='"+(packet.l3_saddr_resolved == undefined ? "Unknown" : packet.l3_saddr_resolved)+"'>"+packet.table.SrcIP+"</td><td>"+1+"</td></tr>");
                                                    }
                                                    else{
                                                        var number = document.getElementById("ip-"+packet.table.SrcIP).childNodes[document.getElementById("ip-"+packet.table.SrcIP).childNodes.length-1]
                                                        number.innerText = (Number(number.innerText)+1)
                                                    }
                                                if(packet.table.DestIP)
                                                    if(document.getElementById("ip-"+packet.table.DestIP) == null){
                                                        $('#common-ip-table tbody').append("<tr id='ip-"+packet.table.DestIP+"'><td style='color: var(--red); cursor:pointer;' title='"+(packet.l3_daddr_resolved == undefined ? "Unknown" : packet.l3_daddr_resolved)+"'>"+packet.table.DestIP+"</td><td>"+1+"</td></tr>");
                                                    }
                                                    else{
                                                        var number = document.getElementById("ip-"+packet.table.DestIP).childNodes[document.getElementById("ip-"+packet.table.DestIP).childNodes.length-1]
                                                        number.innerText = (Number(number.innerText)+1)
                                                    }
                                            }

                                        })
                                        tickerTable.parent().show();
                                    });
                                    
                                }
                                    
                            })
                        }
                })
            }
        }
    </script>
</body>
</html>